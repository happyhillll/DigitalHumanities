plot(res.hcpc, choice="3D.map")
par(mar=c(1,1,1,1))
plot(res.hcpc, choice="3D.map")
par("mar")
par(mar=c(1,1,1,1))
plot(res.hcpc, choice="3D.map")
par("mar")
par(mar=c(1,1,1,1))
plot(res.hcpc, choice="3D.map")
par(mar=c(1,1,1,1))
plot(res.hcpc, choice="3D.map")
par(mar=c(1,1,1,1))
plot(res.hcpc, choice="3D.map")
par(mar=c(1,1,1,1))
plot(res.hcpc, choice="3D.map")
plot(res.hcpc, choice="3D.map")
par(mar=c(5,5,5,5))
plot(res.hcpc, choice="3D.map")
par(mar=c(5,5,5,5))
plot(res.hcpc, choice="3D.map")
par("mar")
par(mar=c(1,1,1,1))
plot(res.hcpc, choice="3D.map")
par(mfrow=c(1,1))
plot(res.hcpc, choice="3D.map")
library(lattice)
library(plyr)
library(xtable)
install.packages("xtable")
library(ggplot2)
library(xtable)
install.packages(spreadr)
install.packages("spreadr")
library(spreadr)
install.packages("devtools")
library(spreadr)
library(igraph)
df <- data.frame(x=1:15, y=c(3, 14, 23, 25, 23, 15, 9, 5, 9, 13, 17, 24, 32, 36, 46))
df
plot(df$x, df$y, pch=19, xlab='x', ylab='y')
fit1 <- lm(y~x, data=df)
fit1 <- lm(y~x, data=df)
fit2 <- lm(y~poly(x, 2, raw=TRUE), data=df)
fit3 <- lm(y~poly(x, 3, raw=true), data=df)
fit3 <- lm(y~poly(x, 3, raw=TRUE), data=df)
fit4 <- lm(y~poly(x, 4, raw=TRUE), data=df)
fit5 <- lm(y~poly(x, 5, raw=TRUE), data=df)
x_axis<-seq(1, 15, length=15)
lines(x_axis, predict(fit1, data.frame(x=x_axis)), col='green')
lines(x_axis, predict(fit2, data.frame(x=x_axis)), col='red')
lines(x_axis, predict(fit3, data.frame(x=x_axis)), col='purple')
lines(x_axis, predict(fit4, data.frame(x=x_axis)), col='blue')
lines(x_axis, predict(fit5, data.frame(x=x_axis)), col='orange')
summary(fit1)$adj.r.squared
summary(fit2)$adj.r.squared
summary(fit3)$adj.r.squared
summary(fit4)$adj.r.squared
summary(fit5)$adj.r.squared
plot(df$x, df$y, pch=19, xlab='x', ylab='y')
lines(x_axis, predict(fit4, data.frame(x=x_axis)), col='blue')
grid()
summary(fit4)
P <- 1:10/sum(1:10)
P
1:10
sum(1:10)
sum(P)
Q <- 20:29/sum(20:29)
Q
KL(x, unit="log2")
library(philentropy)
install.packages("philentropy")
KL(x, unit="log2")
x <- rbind(P, Q)
x
KL(x)
library(philentropy)
KL(x)
KL(x, unit="log2")
KL(x, unit="log")
P.count <- 1:10
P.count
Q.count <- 20:29
Q.count
x.count <- rbind(P.count, Q.count)
KL(x, est.prob="empirical")
Prob <- rbind(1:10/sum(1:10), 20:29/sum(20:29), 30:39/sum(30:39))
Prob
KLMatrix <- KL(Prob)
KLMatrix
heatmap(KLMatrix)
P
KL(x)
KL(P, Q)
KL(x)
x
log2(P/Q)
P*log2(P/Q)
sum(P*log2(P/Q))
P/Q
P[1] / Q[1]
KL(x)
P
Q
P <- 1:10/sum(1:10)
Q <- 20:29/sum(20:29)
x <- rbind(P,Q)
x
KL(x)
library(philentropy)
KL(x)
y <- x
y
y[1,]
y[2, 3] = y[2, 4] + y[2, 3]
y[2, 3] = 0
y
KL(y)
log2(0)
y
y.P
y$P
x
y
y[2,]
P1 <- y[1, ]
Q1 <- y[2, ]
Q1
P1
sum(Q1)
1 - sum(Q1)
temp = 1 - sum(Q1)
Q1[1]
Q1[1] <- Q1[1] + temp
sum(Q1)
P1
Q1
x1 <- rbind(P1, Q1)
x
x1
sum(P1); sum(Q1)
KL(x1)
P1
P1/Q1
log2(P1/Q1)
P1 * log2(P1/Q1)
sum(P1 * log2(P1/Q1))
KL(x1)
P1
Q1
KL(x1)
install.packages(MEET)
install.packages("MEET")
library(MEET)
require("MEET")
install.packages("MEET")
x
H(x)
P1
sum(P1)
H(P1)
H(Q1)
P_xy <- 1:100 / sum(1:100)
P_xy
JE(P_xy)
P1
Q1
sum(P1)
sum(Q1)
H(P1, Q1)
H(P1)
H(Q1)
log2(P1)
log2(Q1)
log2(P1/Q1) * P1
KL(x1)
x1
P1
Q1
KL(x1)
P1 * log2(P1 / Q1)
sum(P1 * log2(P1 / Q1))
require(quanteda)
install.packages("quanteda")
install.packages("quanteda")
install.packages("quanteda.textstats", "quanteda.textplots", "quanteda.corora")
install.packages("quanteda.textstats")
install.packages("quanteda.textplots")
install.packages("quanteda.corora")
require(quanteda)
require(quanteda.textstats)
require(quanteda.textplots)
require(quanteda.corpora)
install.packages("quanteda.corpora")
install.packages("lubridate")
require(quanteda.corpora)
install.packages("quanteda.corpora")
require(quanteda.corpora)
install.packages("quanteda.textmodels")
install.packages("readtext")
devtools::install_github("quanteda/quanteda.corpora")
Sys.getlocale()
Sys.setenv(LANG="en_US.UTF-8")
Sys.getlocale()
install.packages("lubridate")
require(quanteda)
require(quanteda.textstats)
require(quanteda.textplots)
require(quanteda.corpora)
corp_news <- download("data_corpus_guardian")
toks_news <- tokens(corp_news, remove_punct=TRUE)
dfmat_news <- dfm(toks_news)
tstat_key <- textstat_keyness(dfmat_news, target=year(dfmat_news$date) >= 2016)
head(dfmat_news)
head(dfmat_news$date)
str_yymmdd <- head(dfmat_news$date)
str_yymmdd
year(str_yymmdd)
require(lubridate)
year(str_yymmdd)
tstat_key <- textstat_keyness(dfmat_news, target=year(dfmat_news$date) >= 2016)
textplot_keyness(tstat_key)
A <- matrix(c(2,5,2,1,0,0,0,0,1,0,0,0,0,1,3,5,6,0,0,1,0,0,0,2,0,0,1,2,7,2,4,6,2,5,1,0,0,1,0,0,0,1,0,0,3,5,4,0,0,1,0,0,1,0,0,2,0,3,5,7,3,1,4,0,1,0,0,0,0,2,0,0,0,1,3,4,6,0,0,1),
byrow=T, nrow=8, ncol=10)
colnames(A) <- letters[1:10]
rownames(A) <- LETTERS[1:8]
print(A)
# weighted Jaccard Similarity matrix setup
sim.jac <- matrix(0, nrow=nrow(A), ncol=nrow(A))
rownames(sim.jac) <- rownames(A)
colnames(sim.jac) <- rownames(A)
pairs <- t(combn(1:nrow(A), 2))
(print(pairs))
for (i in 1:nrow(pairs)) {
num <- sum(sapply(1:ncol(A), function(x) (min(A[pairs[i, 1], x], A[pairs[i, 2], x]))))
den <- sum(sapply(1:ncol(A), function(x) (max(A[pairs[i, 1], x], A[pairs[i, 2]]))))
sim.jac[pairs[i, 1], pairs[i, 2]] <- num/den
sim.jac[pairs[i, 2], pairs[i, 1]] <- num/den
}
sim.jac[which(is.na(sim.jac))] <- 0
diag(sim.jac) <- 1
print(sim.jac)
# H.Clustering
dist.jac <- as.dist(1-sim.jac)
hc <- hclust(dist.jac, method="ward.D2")
cut <- as.data.frame(cutree(hc, k=3))
cut$names <- rownames(cut)
names(cut) <- c("cut", "names")
library(ggplot2)
library(ggdendro)
library(dplyr)
hcdata <- dendro_data(hc, type="triangle")
hcdata$labels <- left_join(hcdata$labels, cut, by=c("label"="names"))
ggplot(hcdata$segments) +
geom_segment(aes(x=x, y=y, xend=xend, yend=yend))+
geom_text(data = hcdata$labels, aes(x, y, label=label, colour=factor(cut)), hjust=1, size=4) +
scale_color_manual(values=c("red", "blue", "green"), guide_legend(title="clusters")) +
labs (x="", y="") + coord_flip() + theme_bw()
mds <- as.data.frame(cmdscale(dist.jac))
mds$names <- rownames(mds)
mds$cut <- cutree(hc, k=3)
mds <- as.data.frame(cmdscale(dist.jac))
mds$names <- rownames(mds)
mds$cut <- cutree(hc, k=3)
ggplot(mds, aes(V1, V2, label=names)) +
geom_point(aes(colour=factor(cut)), size=2) +
geom_text(aes(colour=factor(cut)), check_overlap = FALSE, size=2.3,
hjust="center", vjust="bottom", nudge_x = 0.005, nudge_y = 0.02) +
scale_color_manual(values=c("red", "blue", "green"), guide_legend(title="clusters")) +
xlab("") + ylab("") + theme_bw()
A <- matrix(c(2,5,2,1,0,0,0,0,1,0,0,0,0,1,3,5,6,0,0,1,0,0,0,2,0,0,1,2,7,2,4,6,2,5,1,0,0,1,0,0,0,1,0,0,3,5,4,0,0,1,0,0,1,0,0,2,0,3,5,7,3,1,4,0,1,0,0,0,0,2,0,0,0,1,3,4,6,0,0,1),
byrow=T, nrow=8, ncol=10)
colnames(A) <- letters[1:10]
rownames(A) <- LETTERS[1:8]
print(A)
# weighted Jaccard Similarity matrix setup
sim.jac <- matrix(0, nrow=nrow(A), ncol=nrow(A))
print(sim.jac)
rownames(sim.jac) <- rownames(A)
colnames(sim.jac) <- rownames(A)
print(sim.jac)
pairs <- t(combn(1:nrow(A), 2))
(print(pairs))
for (i in 1:nrow(pairs)) {
num <- sum(sapply(1:ncol(A), function(x) (min(A[pairs[i, 1], x], A[pairs[i, 2], x]))))
den <- sum(sapply(1:ncol(A), function(x) (max(A[pairs[i, 1], x], A[pairs[i, 2]]))))
sim.jac[pairs[i, 1], pairs[i, 2]] <- num/den
sim.jac[pairs[i, 2], pairs[i, 1]] <- num/den
}
print(A)
A[1]
A[1, ]
A[2, ]
R1 <- A[1, ]
R2 <- A[2, ]
print(sim.jac)
sim.jac[which(is.na(sim.jac))] <- 0
print(sim.jac)
diag(sim.jac) <- 1
print(sim.jac)
(print(pairs))
ncol(A)
A
1:ncol(A)
t <- sapply(1:ncol(A), function(x) (x+1))
t
t <- sapply(1:ncol(A), function(x) (min(A[pairs[i, 1], x], A[pairs[i, 2], x])))
t
sum(t)
u <- sapply(1:ncol(A), function(x) (max(A[pairs[i, 1], x], A[pairs[i, 2], x])))
u
sum(u)
sum(t) / sum(u)
print(sim.jac)
pairs
pairs[1, 1]
pairs[1, 1]; paris[1, 2]
pairs[1, 1]; pairs[1, 2]
t <- sapply(1:ncol(A), function(x) (min(A[pairs[1, 1], x], A[pairs[1, 2], x])))
t
sum(t)
u <- sapply(1:ncol(A), function(x) (max(A[pairs[1, 1], x], A[pairs[1, 2], x])))
u
sum(u)
sum(t) / sum(u)
num <- sum(sapply(1:ncol(A), function(x) (min(A[pairs[i, 1], x], A[pairs[i, 2], x]))))
for (i in 1:nrow(pairs)) {
num <- sum(sapply(1:ncol(A), function(x) (min(A[pairs[i, 1], x], A[pairs[i, 2], x]))))
den <- sum(sapply(1:ncol(A), function(x) (max(A[pairs[i, 1], x], A[pairs[i, 2], x] ))))
sim.jac[pairs[i, 1], pairs[i, 2]] <- num/den
sim.jac[pairs[i, 2], pairs[i, 1]] <- num/den
}
sim.jac[which(is.na(sim.jac))] <- 0
diag(sim.jac) <- 1
print(sim.jac)
pairs
t <- sapply(1:ncol(A), function(x) (min(A[pairs[1, 1], x], A[pairs[1, 2], x])))
t
u <- sapply(1:ncol(A), function(x) (max(A[pairs[1, 1], x], A[pairs[1, 2], x])))
u
library(MASS)
library(graphics)
library(ape)
library(rgl)
working_dir = "d:/current_work/kwonks_drill_okssw_04/"
setwd(working_dir)
working_dir = "d:/current_work/kwonks_drill/okssw_04/"
setwd(working_dir)
data <- read.table("okss_004_007.txt", header=TRUE, encoding="utf-8")
data.mds2 <- cmdscale(data.matrix, k=2)
data.matrix <- as.matrix(data)
data.mds2 <- cmdscale(data.matrix, k=2)
data.mds2
data.mds3 <- cmdscale(data.matrix, k=2)
x <- data.mds2$points[, 1]
y <- data.mds2$points[, 2]
data.mds2 <- cmdscale(data.matrix, k=2)
data.mds2
data.mds2$points
data.mds2
head(data.mds2)
head(data.mds2[, 1])
x <- data.mds2[, 1]
y <- data.mds2[, 2]
plot(x, y, main="OKSS")
grid()
x <- data.mds3[, 1]
y <- data.mds3[, 2]
z <- data.mds3[, 3]
data.mds3 <- cmdscale(data.matrix, k=2)
head(data.mds3)
data.mds3 <- cmdscale(data.matrix, k=3)
x <- data.mds3[, 1]
y <- data.mds3[, 2]
z <- data.mds3[, 3]
plot3d(x, y, z, type='p')
data.dist <- as.dist(data.matrix)
hc <- hclust(data.dist, 'ave')
plot(hc, cex=.85)
tr <- as.phylo(hc)
plot(tr, type="u", cex=.45)
plot(hc, hang=-1, cex=.8)
rect.hclust(hc, k=3)
plot(hc, hang=-1, cex=.8)
rect.hclust(hc, k=5)
plot(hc, hang=-1, cex=.8)
rect.hclust(hc, k=6)
install.packages("MASS", "graphics", "ape", "rgl")
install.packages("MASS", "graphics", "ape", "rgl")
CBSH = c('강산정기/N', '군산만학부형문/N', '나/V', '남원부/N', '녹주/N', '동/N', '산수정기/N', '생겨나/V', '생기/V', '생하/V', '서/N', '서시/N', '수려/N', '쌍각산/N', '약야/N', '어리/V', '왕소군/N', '저라산/N', '적/N', '적성강/N', '전라좌도/N', '절대가인/N', '종출/N', '지리산/N', '춘향/N', '타/V')
CJJB = c('간성지장/N', '계계승승/N', '금고옥촉/N', '기운/N', '남/V', '덕/N', '버금/N', '산하/N', '성자성손/N', '숙종대왕/N', '시절/N', '없/V', '요순/N', '용양호위/N', '우탕/N', '의관문물/N', '있/V', '조정/N', '존비/N', '좌우보필/N', '주석지신/N', '즉위/N', '피/V', '향곡/N', '흐르/V')
CJKS = c('강산정기/N', '군산만학부형문/N', '금강활이아미수/N', '나/V', '남원부/N', '녹주/N', '동/N', '산수정기/N', '생기/V', '생장/N', '서/N', '서시/N', '설도/N', '수려/N', '쌍각산/N', '약야계/N', '어리/V', '왕소군/N', '저라산/N', '적성강/N', '절대가인/N', '제/N', '종출/N', '지리산/N', '춘향/N', '타/V', '태어나/V', '호남좌도/N', '환출/N')
CJSH = c('곳곳이/B', '관왕묘/N', '나/V', '남녀/N', '남북강성/N', '남원부/N', '당당하/V', '대방국/N', '동/N', '만고충신/N', '모시/V', '북통운암/N', '산수정기/N', '서/N', '수/N', '승지/N', '아니/B', '어리/V', '옛날/N', '일색/N', '있/V', '적성강/N', '지리산/N', '충렬/N', '하/V', '호남좌도/N')
CKSH = c('강산정기/N', '군산만학부형문/N', '금강활이아미수/N', '나/V', '남원부/N', '녹주/N', '동/N', '산수정기/N', '생기/V', '생장/N', '서/N', '서시/N', '설도/N', '수려/N', '쌍각산/N', '약야계/N', '어리/V', '왕소군/N', '저라산/N', '적성강/N', '절대가인/N', '제/N', '종출/N', '지리산/N', '춘향/N', '타/V', '태어나/V', '호남좌도/N', '환출/N')
CKYR = c('숙종대왕/N', '즉위/N', '초/N')
CKYS = c('강산정기/N', '군산만학부형문/N', '금강활이아미수/N', '나/V', '남원부/N', '동/N', '문군/N', '산수정기/N', '생겨나/V', '생기/V', '서/N', '설도/N', '셍겨나/N', '어리/V', '영웅열사/N', '왕소군/N', '우리나라/N', '적성강/N', '절대가인/N', '제/N', '지리산/N', '춘향/N', '타/V', '호남좌도/N', '환생/N')
CLSU = c('고요직설/N', '나/V', '때/N', '법/N', '숙종/N', '시절/N', '아동국/N', '여상/N', '요순시절/N', '은주/N', '이윤/N', '있/V', '자고로/B', '진실로/B', '충신/N', '현성지국/N', '홍모우순풍/N')
CPBS = c('간성지장/N', '계계승승/N', '금고옥촉/N', '기운/N', '남/V', '덕화/N', '산하/N', '성자성손/N', '숙종대왕/N', '시절/N', '없/V', '요순/N', '용왕호위/N', '있/V', '조정/N', '존비/N', '즉위/N', '피/V', '향곡/N', '흐르/V')
intersect(CBSH, CJJB)
length(intersect(CBSH, CJJB))
intersect(CJKS, CKSH)
union(CBSH, CJJB)
intersect(CBSH, CJJB)
union(CBSH, CJJB)
length(intersect(CBSH, CJJB))
length(union(CBSH, CJJB))
jac_sim = length(intersect(CBSH, CJJB)) / length(union(CBSH, CJJB))
jac_sim
intersect(CJKS, CKSH)
length(intersect(CJKS, CKSH))
union(CJKS, CKSH)
length(union(CJKS, CKSH))
jac_sim = length(intersect(CJKS, CKSH)) / length(union(CJKS, CKSH))
jac_sim
intersect(CJKS, CKYS)
length(intersect(CJKS, CKYS))
union(CJKS, CKYS)
length(union(CJKS, CKYS))
jac_sim = length(intersect(CJKS, CKYS)) / length(union(CJKS, CKYS))
jac_sim
jac_dist = 1 - jac_sim
jac_dist
require(ape)
require(MASS)
require(graphics)
require(vegan)
require(amap)
require(scatterplot3d)
options(digits=22)
setwd('d:/current_work/kwonks_drill/sprod/sprod_002')
install.packages("amap")
library(amap)
kdkjac = read.table('spr002_003.txt')
kdkjac.d = as.dist(kdkjac)
kdkjac.mds1 = cmdscale(kdkjac.d, k=1)
kdjjac.mds1
kdkjac.mds1
kdkjac.mds2 = cmdscale(kdkjac.d, k=2)
kdkjac.mds3 = cmdscale(kdkjac.d, k=3)
kdkjac.mds4 = cmdscale(kdkjac.d, k=4)
kdkjac.mds5 = cmdscale(kdkjac.d, k=5)
kdkjac.mds2$stress
kdkjac.mds2
plot(kdkjac.mds2[, 1], kdkjac.mds2[, 2], "p")
grid()
plot(kdk_hc.average, hang=-1, cex=.8, main="Hierarchical Clustering (average)\nJaccard Similarity Index",  sub="", xlab="Work IDs", ylab="Distance (0~1)")
kdk_hc.average = hclust(kdkjac.d, method="average")
plot(kdk_hc.average, hang=-1, cex=.8, main="Hierarchical Clustering (average)\nJaccard Similarity Index",  sub="", xlab="Work IDs", ylab="Distance (0~1)")
X11(72, 48)
plot(kdk_hc.average, hang=-1, cex=.8, main="Hierarchical Clustering (average)\nJaccard Similarity Index",  sub="", xlab="Work IDs", ylab="Distance (0~1)")
X11(72, 48)
plot(kdk_hc.average, hang=-1, cex=.8, main="Cut into 16 clusters",  sub="", xlab="Work IDs", ylab="Distance (0~1)")
rect.hclust(kdk_hc.average, k=16, border="red")
kdk_hc.tree = as.phylo.hclust(kdk_hc.average)
X11(64, 64)
plot(kdk_hc.tree, type="u", cex=0.8, lab4ut="radial", font=1, main="Unrooted Tree")
plot(kdk_hc.tree, type="u", cex=0.8)
plot(kdk_hc.tree, type="u", cex=0.8, font=3)
kdk_hc.tree = as.phylo.hclust(kdk_hc.average)
X11(64, 64)
plot(kdk_hc.tree, type="c", use.edge.length=FALSE, direction="l", cex=.5)
require(ape)
require(MASS)
require(graphics)
require(vegan)
require(amap)
require(scatterplot3d)
options(digits=22)
setwd('/Users/minjikim/Desktop/dh/drills/sprod/sprod_002/spr002_002.txt')
setwd('/Users/minjikim/Desktop/dh/drills/sprod/sprod_002/')
kdkjac = read.table('spr002_003.txt')
kdkjac.d = as.dist(kdkjac)
kdkjac.mds3 = cmdscale(kdkjac.d, k=3)
kdkjac.mds4 = cmdscale(kdkjac.d, k=4)
kdkjac.mds5 = cmdscale(kdkjac.d, k=5)
plot(kdkjac.mds2[, 1], kdkjac.mds2[, 2], "p")
kdkjac.mds1 = cmdscale(kdkjac.d, k=1)
kdkjac.mds2 = cmdscale(kdkjac.d, k=2)
kdkjac.mds3 = cmdscale(kdkjac.d, k=3)
kdkjac.mds4 = cmdscale(kdkjac.d, k=4)
kdkjac.mds5 = cmdscale(kdkjac.d, k=5)
plot(kdkjac.mds2[, 1], kdkjac.mds2[, 2], "p")
kdkjac
#save distance in kdkjac.d
kdkjac.d = as.dist(kdkjac)
#k = dimension
kdkjac.mds1 = cmdscale(kdkjac.d, k=1)
kdkjac.mds2 = cmdscale(kdkjac.d, k=2)
kdkjac.mds3 = cmdscale(kdkjac.d, k=3)
kdkjac.mds4 = cmdscale(kdkjac.d, k=4)
kdkjac.mds5 = cmdscale(kdkjac.d, k=5)
plot(kdkjac.mds2[, 1], kdkjac.mds2[, 2], "p")
plot(kdkjac.mds3[,1], kdkjac.mds3[,2], kdkjac.mds3[,3],"p")
plot(kdkjac.mds2[, 1], kdkjac.mds2[, 2], "p")
kdk_hc.average = hclust(kdkjac.d, method="average")
#####################################
# Hierarchical Clustering (average method)
#####################################
X11(72, 48) #window-size 늘리기
plot(kdk_hc.average, hang=-1, cex=.8, main="Hierarchical Clustering (average)\nJaccard Similarity (Distance) Index",  sub="", xlab="Work IDs", ylab="Distance (0~1)")
X11(72, 48)
plot(kdk_hc.average, hang=-1, cex=.8, main="Cut into 16 clusters",  sub="", xlab="Work IDs", ylab="Distance (0~1)")
rect.hclust(kdk_hc.average, k=16, border="red")
kdk_hc.tree = as.phylo.hclust(kdk_hc.average)
X11(64, 64)
plot(kdk_hc.tree, type="u", cex=0.8, font=3)
########################
# Left-Justified Clade 그냥 나누는 분기점만 레벨 별로 표시해줌
########################
kdk_hc.tree = as.phylo.hclust(kdk_hc.average)
X11(64, 64)
plot(kdk_hc.tree, type="c", use.edge.length=FALSE, direction="l", cex=.8)
